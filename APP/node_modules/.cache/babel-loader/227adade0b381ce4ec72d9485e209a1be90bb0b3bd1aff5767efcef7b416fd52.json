{"ast":null,"code":"export default ((state, action) => {\n  switch (action.type) {\n    case \"initializeData\":\n      return initializeData(state, action);\n      break;\n    case \"createTable\":\n      return createTable(state, action);\n      break;\n    case \"setCurrentTable\":\n      return setCurrentTable(state, action);\n      break;\n    case \"destroyCurrentTable\":\n      return destroyCurrentTable(state, action);\n      break;\n    case \"setCurrentField\":\n      return setCurrentField(state, action);\n      break;\n    case \"destroyCurrentField\":\n      return destroyCurrentField(state, action);\n      break;\n    case \"tableChange\":\n      return tableChange(state, action);\n      break;\n    case \"dropTable\":\n      return dropTable(state, action);\n      break;\n    case \"createField\":\n      return createField(state, action);\n      break;\n    case \"dropField\":\n      return dropField(state, action);\n      break;\n    case \"fieldChange\":\n      return fieldChange(state, action);\n      break;\n    case \"setSelectedConstraint\":\n      return setSelectedConstraint(state, action);\n      break;\n    case \"cascadingUpdateFields\":\n      return cascadingUpdateFields(state, action);\n      break;\n    default:\n      return state;\n  }\n});\nconst initializeData = (state, action) => {\n  const {\n    tables,\n    fields,\n    project,\n    version\n  } = action.payload;\n  const database = {\n    tables,\n    fields\n  };\n  return {\n    ...state,\n    database,\n    project,\n    version\n  };\n};\nconst createTable = (state, action) => {\n  const {\n    table\n  } = action.payload;\n  const {\n    database\n  } = state;\n  const {\n    tables\n  } = database;\n  let newTables;\n  if (tables) {\n    newTables = [table, ...tables];\n  } else {\n    newTables = [table];\n  }\n  database.tables = newTables;\n  return {\n    ...state,\n    database\n  };\n};\nconst setCurrentTable = (state, action) => {\n  const {\n    table\n  } = action.payload;\n  const {\n    database\n  } = state;\n  database.currentTable = table;\n  return {\n    ...state,\n    database\n  };\n};\nconst setCurrentField = (state, action) => {\n  const {\n    field\n  } = action.payload;\n  const {\n    database\n  } = state;\n  database.currentField = field;\n  return {\n    ...state,\n    database\n  };\n};\nconst destroyCurrentTable = (state, action) => {\n  const {\n    database\n  } = state;\n  delete database.currentTable;\n  delete database.currentField;\n  return {\n    ...state,\n    database\n  };\n};\nconst destroyCurrentField = (state, action) => {\n  const {\n    database\n  } = state;\n  delete database.currentField;\n  return {\n    ...state,\n    database\n  };\n};\nconst tableChange = (state, action) => {\n  const {\n    table\n  } = action.payload;\n  const {\n    database\n  } = state;\n  const {\n    tables\n  } = database;\n  const newTables = tables.map(tb => {\n    if (tb.table_id === table.table_id) {\n      return table;\n    } else {\n      return tb;\n    }\n  });\n  database.tables = newTables;\n  database.currentTable = table;\n  return {\n    ...state,\n    database\n  };\n};\nconst dropTable = (state, action) => {\n  const {\n    table\n  } = action.payload;\n  const {\n    database\n  } = state;\n  const {\n    tables,\n    fields\n  } = database;\n  const newTables = tables.filter(tb => tb.table_id != table.table_id);\n  const newFields = fields.filter(fd => fd.table_id != table.table_id);\n  /* Xoá bảng xoá luôn trường của bảng */\n  /* Gòi còn xoá ràng buộc khoá ngoại nữa mà để nữa làm sau */\n  database.tables = newTables;\n  database.fields = newFields;\n  return {\n    ...state,\n    database\n  };\n};\nconst createField = (state, action) => {\n  const {\n    field\n  } = action.payload;\n  const {\n    database\n  } = state;\n  const {\n    fields\n  } = database;\n  let newFields;\n  if (fields) {\n    newFields = [...fields, field];\n  } else {\n    newFields = [field];\n  }\n  database.fields = newFields;\n  return {\n    ...state,\n    database\n  };\n};\nconst dropField = (state, action) => {\n  const {\n    field\n  } = action.payload;\n  const {\n    database\n  } = state;\n  const {\n    fields\n  } = database;\n  const newFields = fields.filter(fd => fd.field_id != field.field_id);\n  database.fields = newFields;\n  return {\n    ...state,\n    database\n  };\n};\nconst fieldChange = (state, action) => {\n  const {\n    values\n  } = action.payload;\n  const {\n    database\n  } = state;\n  const {\n    fields\n  } = database;\n  const field = database.currentField;\n  for (let i = 0; i < values.length; i++) {\n    const {\n      prop,\n      value\n    } = values[i];\n    field[prop] = value;\n  }\n  const newFields = fields.map(fd => {\n    if (fd.field_id === field.field_id) {\n      return field;\n    } else {\n      return fd;\n    }\n  });\n  database.fields = newFields;\n  database.currentField = field;\n  return {\n    ...state,\n    database: {\n      ...database,\n      currentField: {\n        ...field\n      }\n    }\n  };\n};\nconst setSelectedConstraint = (state, action) => {\n  const {\n    constraint\n  } = action.payload;\n  return {\n    ...state,\n    selectedConstraint: {\n      ...constraint,\n      type: constraint.value\n    }\n  };\n};\nconst cascadingUpdateFields = (state, action) => {\n  const {\n    newFields,\n    fk\n  } = action.payload;\n  const {\n    database\n  } = state;\n  const {\n    fields,\n    currentTable,\n    tables\n  } = database;\n  const updatedFields = fields.map(field => {\n    const {\n      field_alias\n    } = field;\n    const filtedField = newFields.filter(f => f.field_alias == field_alias)[0];\n    if (filtedField != undefined) {\n      return {\n        ...field,\n        ...filtedField\n      };\n    } else {\n      return field;\n    }\n  });\n  currentTable.fk = fk;\n  const newTables = tables.map(tb => {\n    if (tb.table_id == currentTable.table_id) {\n      return currentTable;\n    } else {\n      return tb;\n    }\n  });\n  database.currentTable = currentTable;\n  database.fields = updatedFields;\n  return {\n    ...state,\n    database\n  };\n};","map":{"version":3,"names":["state","action","type","initializeData","createTable","setCurrentTable","destroyCurrentTable","setCurrentField","destroyCurrentField","tableChange","dropTable","createField","dropField","fieldChange","setSelectedConstraint","cascadingUpdateFields","tables","fields","project","version","payload","database","table","newTables","currentTable","field","currentField","map","tb","table_id","filter","newFields","fd","field_id","values","i","length","prop","value","constraint","selectedConstraint","fk","updatedFields","field_alias","filtedField","f","undefined"],"sources":["D:/Nhan/DIPE_V2/Client/ClientServer/APP/src/redux/router/database.js"],"sourcesContent":["export default (state, action) => {\n    switch (action.type) {\n\n        case \"initializeData\":\n            return initializeData( state, action );\n        break;\n\n        case \"createTable\":\n            return createTable( state, action );\n            break;\n\n        case \"setCurrentTable\":\n            return setCurrentTable( state, action );\n            break;\n\n        case \"destroyCurrentTable\":\n            return destroyCurrentTable(state, action);\n            break;\n\n        case \"setCurrentField\":\n            return setCurrentField( state, action );\n            break;\n\n        case \"destroyCurrentField\":\n            return destroyCurrentField(state, action);\n            break;\n\n        case \"tableChange\":\n            return tableChange( state, action );\n            break;\n\n        case \"dropTable\":\n            return dropTable( state, action );\n            break;\n\n        case \"createField\":\n            return createField( state, action );\n            break;\n\n        case \"dropField\":\n            return dropField( state, action );\n            break;\n\n        case \"fieldChange\":\n            return fieldChange( state, action );\n            break;\n\n        case \"setSelectedConstraint\":\n            return setSelectedConstraint( state, action );\n            break;\n\n        case \"cascadingUpdateFields\":\n            return cascadingUpdateFields( state, action );\n            break;\n\n        default:\n            return state;\n    }\n}\n\n\nconst initializeData = ( state, action ) => {\n    const { tables, fields, project, version } = action.payload;\n    const database = { tables, fields }\n    return { ...state, database, project, version }\n}\n\nconst createTable = ( state, action ) => {\n    const { table } = action.payload;\n    const { database } = state;\n    const { tables } = database;\n    let newTables;\n    if( tables ){\n        newTables = [ table, ...tables ]\n    }else{\n        newTables = [ table ]\n    }\n\n    database.tables = newTables;\n    return {...state, database };\n}\n\nconst setCurrentTable = ( state, action ) => {\n    const { table } = action.payload;\n    const { database } = state;\n    database.currentTable = table;\n    return { ...state, database }\n}\n\nconst setCurrentField = ( state, action ) => {\n    const { field } = action.payload;\n    const { database } = state;\n    database.currentField = field;\n    return { ...state, database }\n}\n\nconst destroyCurrentTable = (state, action) => {\n    const { database } = state;\n    delete database.currentTable;\n    delete database.currentField;\n    return { ...state, database }\n}\n\nconst destroyCurrentField = (state, action) => {\n    const { database } = state;\n    delete database.currentField;\n    return { ...state, database }\n}\n\nconst tableChange = ( state, action ) => {\n    const { table } = action.payload;\n    const { database } = state;\n    const { tables } = database;\n    const newTables = tables.map( tb => {\n        if( tb.table_id === table.table_id){\n            return table\n        }else{\n            return tb\n        }\n    })\n    database.tables = newTables;\n    database.currentTable = table;\n    return { ...state, database }\n}\n\nconst dropTable = ( state, action ) => {\n    const { table } = action.payload;\n    const { database } = state;\n    const { tables, fields } = database;\n\n    const newTables = tables.filter( tb => tb.table_id != table.table_id );\n    const newFields = fields.filter( fd => fd.table_id != table.table_id );\n    /* Xoá bảng xoá luôn trường của bảng */\n    /* Gòi còn xoá ràng buộc khoá ngoại nữa mà để nữa làm sau */\n    database.tables = newTables;\n    database.fields = newFields;\n    return { ...state, database }\n}\n\nconst createField = ( state, action ) => {\n    const { field } = action.payload;\n    const { database } = state;\n    const { fields } = database;\n    let newFields;\n    if( fields ){\n        newFields = [ ...fields, field ]\n    }else{\n        newFields = [ field ]\n    }\n\n    database.fields = newFields;\n    return {...state, database };\n}\n\nconst dropField = ( state, action ) => {\n    const { field } = action.payload;\n    const { database } = state;\n    const { fields } = database;\n\n    const newFields = fields.filter( fd => fd.field_id != field.field_id );\n    database.fields = newFields;\n    return { ...state, database }\n}\n\nconst fieldChange = ( state, action ) => {\n    const { values } = action.payload;\n    const { database } = state;\n    const { fields } = database;\n    const field = database.currentField\n    for( let i = 0; i < values.length ; i++ ){\n        const { prop, value } = values[i]\n        field[prop] = value;\n    }\n\n    const newFields = fields.map( fd => {\n        if( fd.field_id === field.field_id){\n            return field\n        }else{\n            return fd\n        }\n    })\n    database.fields = newFields;\n    database.currentField = field;\n    return { ...state, database: { ...database, currentField: { ...field } } }\n}\n\nconst setSelectedConstraint = ( state, action ) => {\n    const { constraint } = action.payload;\n\n    return { ...state, selectedConstraint: { ...constraint, type: constraint.value } }\n}\n\nconst cascadingUpdateFields = ( state, action ) => {\n    const { newFields, fk } = action.payload;\n    const { database } = state;\n    const { fields, currentTable, tables } = database;\n\n    const updatedFields = fields.map( field => {\n        const { field_alias } = field;\n        const filtedField = newFields.filter( f => f.field_alias == field_alias )[0];\n        if( filtedField != undefined ){\n            return { ...field, ...filtedField }\n        }else{\n            return field\n        }\n    })\n\n    currentTable.fk = fk;\n    const newTables = tables.map( tb => {\n        if( tb.table_id == currentTable.table_id ){\n            return currentTable;\n        }else{\n            return tb;\n        }\n    })\n    database.currentTable = currentTable;\n    database.fields = updatedFields;\n    return { ...state, database };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}